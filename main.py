# -*- coding: utf-8 -*-
import telebot
from telebot import types
import datetime
# from time_calendar import create_calendar, create_watch
import constans
import myClass
import g  # global

#bot = myClass.bot # idea
bot = telebot.TeleBot(constans.token)


def log(message):
    print("======", datetime.datetime.now())
    print("message:", message.text)
    print("g.location", g.location)
    print("GROUP:", g.group)
    for note_name in myClass.work.some_group:
        print("\'{}\': ".format(note_name), myClass.work.some_group[note_name])
    print()
    pass
    # print("\n------ begin")
    # print(datetime.datetime.now())
    # print("Lang:", g.lang)
    # print("Location:", g.location)
    # print("Group:", g.group)
    # print("Work:", myClass.work.some_group)
    # print("(current_shown_dates):", myClass.work.current_shown_dates)
    # print(myClass.work.time)
    # print("count edit note work:", str(myClass.work.edit_note_work))
    # print("\n------ end")


def main_menu(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    if g.lang == 'ru':
        user_markup.row('–†–∞–±–æ—á–∏–µ', '–î–æ–º–∞—à–Ω–∏–µ')  # üíºüè¢ üè†
        user_markup.row('–°—Ä–æ—á–Ω—ã–µ')  # ‚è∞
        user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–î—Ä—É–≥–∏–µ')  # ‚öô \u****
        user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', '–ù–∞–∑–∞–¥')  # + \u**** üîô
        bot.send_message(message.from_user.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=user_markup)
    else:
        user_markup.row('Workers', 'Home')  # üè†
        user_markup.row('Urgent')
        user_markup.row('Settings', 'Other')
        user_markup.row('Add group', 'Back')
        bot.send_message(message.from_user.id, 'You are in the main menu.', reply_markup=user_markup)
        'You are in the main menu'


def workers(message):
    myClass.work.main(bot, message, g.lang)


def home(message):
    myClass.home.main(bot, message, g.lang)


def urgent(message):
    myClass.urgent.main(bot, message, g.lang)



def other(message):
    print("hello from def other(message):")
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

    for i in range(0, len(g.group), 2):
        if (i + 1) < len(g.group):
            user_markup.row(g.group[i], g.group[i + 1])  # –í–∏–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥
        else:
            user_markup.row(g.group[i])

    if g.lang == 'ru':
        user_markup.row("–ù–∞–∑–∞–¥")  # '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É'
        bot.send_message(message.from_user.id, "–í—ã –≤ –º–µ–Ω—é \"–î—Ä—É–≥–∏–µ\"", reply_markup=user_markup)
    else:
        user_markup.row("Back")
        bot.send_message(message.from_user.id, "You are in the menu \"Others\"", reply_markup=user_markup)
    # else:
    #     for i in range(len(group)):
    #         user_markup.add(group[i])
    #     user_markup.row('Back')
    #     bot.send_message(message.from_user.id, , reply_markup=user_markup)


def some_other_group(message):
    myClass.other[g.count_name_group_other].main(bot, message, g.lang)


def sett_lang(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–†—É—Å—Å–∫–∏–π', 'English')

    if g.lang == 'ru':
        user_markup.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.from_user.id, "–í—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", reply_markup=user_markup)
    else:
        user_markup.row('Back')
        bot.send_message(message.from_user.id, "You are in the settings.", reply_markup=user_markup)



def add_group(message):
    g.group.append(message.text)
    myClass.other[message.text] = myClass.NOTE(message.text)

    if g.lang == 'ru':
        bot.send_message(message.from_user.id,
                         '–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}'.format(message.text))  # group[-1]
    else:
        bot.send_message(message.from_user.id, 'You created a new group called: {}'.format(message.text))

    g.location = ['main_menu']
    main_menu(message)


# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@bot.message_handler(commands=['start'])
def handle_start(message):
    g.location = ['main_menu']
    g.group = []
    if g.lang == 'ru':
        bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    else:
        bot.send_message(message.from_user.id, "Welcome!")
    main_menu(message)  # –∑–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é


# –°—Ç–æ–ø
@bot.message_handler(commands=['stop'])
def hendle_stop(message):
    hide_markup = telebot.types.ReplyKeyboardRemove()
    if g.lang == 'ru':
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞!', reply_markup=hide_markup)
    else:
        bot.send_message(message.from_user.id, 'Goodbye!', reply_markup=hide_markup)


# –∏–∑–º–∏–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
@bot.message_handler(content_types=['text'])
def handle_language(message):
    if g.location == ['main_menu']:
        if message.text == '–†–∞–±–æ—á–∏–µ' or message.text == 'Workers':
            g.location = ['workers']
            workers(message)
        elif message.text == '–î–æ–º–∞—à–Ω–∏–µ' or message.text == 'Home':
            g.location = ['home']
            home(message)
        elif message.text == '–°—Ä–æ—á–Ω—ã–µ' or message.text == 'Urgent':
            g.location = ['urgent']
            urgent(message)
        elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' or message.text == 'Settings':
            g.location = ['settings']
            sett_lang(message)
        elif message.text == '–î—Ä—É–≥–∏–µ' or message.text == 'Other':
            g.location = ['other']
            other(message)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É' or message.text == 'Add group':
            g.location = ['add_group']
            hide_markup = telebot.types.ReplyKeyboardRemove()
            if g.lang == 'ru':
                bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", reply_markup=hide_markup)
            else:
                bot.send_message(message.from_user.id, "Enter group name:", reply_markup=hide_markup)

    elif g.location[0] == 'workers':
        if g.location == ['workers']:
            if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == 'Add note':
                g.location.append('add_note')
                myClass.work.add_note(bot, message, g.lang)
            elif message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
                g.location = ['main_menu']
                main_menu(message)
        elif g.location[1] == 'add_note':
            g.location[1] = 'add_note_time1'
            myClass.work.add_note_name(message.text)
            myClass.work.get_calendar(bot, message, g.lang)# –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –∫–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω–µ–º–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä, –∑–º—ñ–Ω–∏—Ç—å—Å—è  g.location[1]  'add_note_time1' -> 'add_note_time2'
        elif g.location[1] == 'add_note_time2':  # –∫–æ–ª–∏ –≤–∏–±—Ä–∞–ª–∏ —á–∞—Å
            if message.text == "–î–∞–ª—å—à–µ" or message.text == "OK":
                g.location[1] = 'add_note_description'
                myClass.work.add_note_time(bot, message, g.lang)
        elif g.location[1] == 'add_note_description':
            g.location = ['workers']
            myClass.work.add_note_description(message)
            #print("myClass.work.some_group:", myClass.work.some_group)
            workers(message)

    elif g.location[0] == 'home':
        if g.location == ['home']:
            if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == 'Add note':
                g.location.append('add_note')
                myClass.home.add_note(bot, message, g.lang)
            elif message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
                g.location = ['main_menu']
                main_menu(message)
        elif g.location[1] == 'add_note':
            g.location[1] = 'add_note_time1'
            myClass.home.add_note_name(message.text)
            myClass.home.get_calendar(bot, message, g.lang)  # –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –∫–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω–µ–º–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä, –∑–º—ñ–Ω–∏—Ç—å—Å—è  g.location[1]  'add_note_time1' -> 'add_note_time2'
        elif g.location[1] == 'add_note_time2':  # –∫–æ–ª–∏ –≤–∏–±—Ä–∞–ª–∏ —á–∞—Å
            if message.text == "–î–∞–ª—å—à–µ" or message.text == "OK":
                g.location[1] = 'add_note_description'
                myClass.home.add_note_time(bot, message, g.lang)
        elif g.location[1] == 'add_note_description':
            g.location = ['home']
            myClass.home.add_note_description(message)
            # print("myClass.work.some_group:", myClass.work.some_group)
            home(message)

    elif g.location[0] == 'urgent':
        if g.location == ['urgent']:
            if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == 'Add note':
                g.location.append('add_note')
                myClass.urgent.add_note(bot, message, g.lang)
            elif message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
                g.location = ['main_menu']
                main_menu(message)
        elif g.location[1] == 'add_note':
            g.location[1] = 'add_note_time1'
            myClass.urgent.add_note_name(message.text)
            myClass.urgent.get_calendar(bot, message, g.lang)  # –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –∫–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω–µ–º–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä, –∑–º—ñ–Ω–∏—Ç—å—Å—è  g.location[1]  'add_note_time1' -> 'add_note_time2'
        elif g.location[1] == 'add_note_time2':  # –∫–æ–ª–∏ –≤–∏–±—Ä–∞–ª–∏ —á–∞—Å
            if message.text == "–î–∞–ª—å—à–µ" or message.text == "OK":
                g.location[1] = 'add_note_description'
                myClass.urgent.add_note_time(bot, message, g.lang)
        elif g.location[1] == 'add_note_description':
            g.location = ['home']
            myClass.urgent.add_note_description(message)
            # print("myClass.work.some_group:", myClass.work.some_group)
            urgent(message)
        # if message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
        #     g.location = ['main_menu']
        #     main_menu(message)

    elif g.location[0] == 'other':
        if message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
             g.location = ['main_menu']
             main_menu(message)
        elif g.location == ['other']:
            for name_group_other in g.group:
                if name_group_other == message.text:
                    bot.send_message(message.from_user.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –≥—Ä—É–ø—É " + name_group_other)
                    g.location.append(name_group_other)
                    g.count_name_group_other = name_group_other
                    myClass.other[g.count_name_group_other].main(bot, message, g.lang)
                    break
                # name_group_outher –≥—Ä—É–ø–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏
        elif g.location == ['other', g.count_name_group_other]:
            if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == 'Add note':
                g.location.append('add_note')
                myClass.other[g.count_name_group_other].add_note(bot, message, g.lang)
            elif message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
                g.location = ['main_menu']
                main_menu(message)
        elif g.location[2] == 'add_note':
            g.location[2] = 'add_note_time1'
            myClass.other[g.count_name_group_other].add_note_name(message.text)
            myClass.other[g.count_name_group_other].get_calendar(bot, message, g.lang)  # –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –∫–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω–µ–º–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä, –∑–º—ñ–Ω–∏—Ç—å—Å—è  g.location[2]  'add_note_time1' -> 'add_note_time2'
        elif g.location[2] == 'add_note_time2':  # –∫–æ–ª–∏ –≤–∏–±—Ä–∞–ª–∏ —á–∞—Å
            if message.text == "–î–∞–ª—å—à–µ" or message.text == "OK":
                g.location[2] = 'add_note_description'
                myClass.other[g.count_name_group_other].add_note_time(bot, message, g.lang)
        elif g.location[2] == 'add_note_description':
            g.location = ['other', g.count_name_group_other]  # debug
            myClass.other[g.count_name_group_other].add_note_description(message)
            # print("myClass.work.some_group:", myClass.work.some_group)
            some_other_group(message)


    elif g.location == ['settings']:
        if message.text == "English":
            g.lang = 'en'
            sett_lang(message)
        elif message.text == "–†—É—Å—Å–∫–∏–π":
            g.lang = 'ru'
            sett_lang(message)
        elif message.text == '–ù–∞–∑–∞–¥' or message.text == 'Back':
            g.location = ['main_menu']
            main_menu(message)

    elif g.location == ['add_group']:
        add_group(message)
    log(message)


# calendar handle
# inline create
# @bot.message_handler(commands=['calendar'])


# inline handle
@bot.callback_query_handler(func=lambda call: call.data[0:13] == 'calendar-day-')
def get_day(call):
    # —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è 'workers/add_note_time2',
    if g.location[0] == 'workers':
        g.location = myClass.work.get_day(bot, call, g.location, g.lang, 1)  # —ñ–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –º—ñ—Å—Ü–µ –¥–µ –º–∏ –∑–∞—Ä–∞–∑ —î ('workers/add_note_time1')
    elif g.location[0] == 'home':
        g.location = myClass.home.get_day(bot, call, g.location, g.lang, 1)
    elif g.location[0] == 'urgent':
        g.location = myClass.urgent.get_day(bot, call, g.location, g.lang, 1)
    elif g.location[0] == 'other':
        g.location = myClass.other[g.count_name_group_other].get_day(bot, call, g.location, g.lang, 2)


@bot.callback_query_handler(func=lambda call: call.data == 'next-month')
def next_month(call):
    if g.location[0] == 'workers':
        myClass.work.next_month(bot, call, g.lang)
    elif g.location[0] == 'home':
        myClass.home.next_month(bot, call, g.lang)
    elif g.location[0] == 'urgent':
        myClass.urgent.next_month(bot, call, g.lang)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].next_month(bot, call, g.lang)


@bot.callback_query_handler(func=lambda call: call.data == 'previous-month')
def previous_month(call):
    if g.location[0] == 'workers':
        myClass.work.previous_month(bot, call, g.lang)
    elif g.location[0] == 'home':
        myClass.home.previous_month(bot, call, g.lang)
    elif g.location[0] == 'urgent':
        myClass.urgent.previous_month(bot, call, g.lang)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].previous_month(bot, call, g.lang)


@bot.callback_query_handler(func=lambda call: call.data == 'hours' or call.data == 'hours_inc')
def hours_increment(call):
    if g.location[0] == 'workers':
        myClass.work.hours_increment(bot, call)
    elif g.location[0] == 'home':
        myClass.home.hours_increment(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.hours_increment(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].hours_increment(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'hours_dec')
def hours_decrement(call):
    if g.location[0] == 'workers':
        myClass.work.hours_decrement(bot, call)
    elif g.location[0] == 'home':
        myClass.home.hours_decrement(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.hours_decrement(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].hours_decrement(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'minut_inc')
def minut_increment(call):
    if g.location[0] == 'workers':
        myClass.work.minut_increment(bot, call)
    elif g.location[0] == 'home':
        myClass.home.minut_increment(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.minut_increment(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].minut_increment(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'minutes')
def minutes_increment(call):
    if g.location[0] == 'workers':
        myClass.work.minutes_increment(bot, call)
    elif g.location[0] == 'home':
        myClass.home.minutes_increment(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.minutes_increment(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].minutes_increment(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'minut_dec')
def minut_decrement(call):
    if g.location[0] == 'workers':
        myClass.work.minut_decrement(bot, call)
    elif g.location[0] == 'home':
        myClass.home.minut_decrement(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.minut_decrement(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].minut_decrement(bot, call)


@bot.callback_query_handler(func=lambda call: call.data == 'ignore')
def ignore(call):
    if g.location[0] == 'workers':
        myClass.work.ignore(bot, call)
    elif g.location[0] == 'home':
        myClass.home.ignore(bot, call)
    elif g.location[0] == 'urgent':
        myClass.urgent.ignore(bot, call)
    elif g.location[0] == 'other':
        myClass.other[g.count_name_group_other].ignore(bot, call)


bot.polling(none_stop=True, interval=0)


# TODO —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–º—ñ—Ç–æ–∫ –¥–æ –¥—Ä—É–≥–∏–µ
# TODO –∫–æ–ª–∏ –¥–æ–±–∞–≤–ª—è—î—à –≥—Ä—É–ø—É myClass.other['name_group'] = NOTE('name_group')
# TODO –≤–∏–¥–∞–ª–∏—Ç–∏ g.group
# –í –¥—Ä—É–≥–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
# –í –≥—Ä—É–ø–ø–µ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫—É
# –î–æ–¥–∞—Ç–∏ emoji
# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ global —É –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö
# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–æ–≤—É —É –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö
# –û—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–æ–º–º–∞–Ω–¥–µ stop
# –û—Ç–º–µ–Ω–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏
# –ó–∞–º—ñ–Ω–∏—Ç–∏ chat –Ω–∞ from_user
# –§—É–Ω–∫—Ü—ñ—é —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
# –ü—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –∑–∞–º—ñ—Ç–∫–∏ –≤–∏–≤–æ–¥–∏—Ç–∏ –∑–∞–º—ñ—Ç–∫—É —ñ –ø–∏—Ç–∞—Ç–∏ —á–∏ –¥—ñ–π—Å–Ω–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—ó –¥–æ–¥–∞—Ç–∏
# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∑–∞–º—ñ—Ç–∫–∏ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
# –≤–∏–≤–æ–¥–∏—Ç–∏ –Ω–µ 0 –∞ 00
# –Ø–∫—â–æ –¥–æ –¥–∞—Ç–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–∞–º—ñ—Ç–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø–∞—Ä—É –¥–Ω—ñ–≤ —Ç–æ –≤–∏–≤–æ–¥–∏—Ç–∏ –¥–∞—Ç—É —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–∞–º—ñ—Ç–∫–∏
# –Ø–∫—â–æ –¥–æ –¥–∞—Ç–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–∞–º—ñ—Ç–∫–∏ –≤ —Ü–µ–π –¥–µ–Ω—å —Ç–æ –≤–∏–≤–æ–¥–∏—Ç–∏ –≥–æ–¥–∏–Ω—É:—Ö–≤–∏–ª–∏–Ω—É —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ –±–∞–≥–∏ —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è workers –∞ –¥–∞—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
# –ø–æ–¥—É–º–∞—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ö–æ–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
# –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
# –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ—ó –¥–æ g.py
# –ü–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∫–æ–¥ –ø—ñ–¥ python2 —â–æ–± –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ —Ö–µ—Ä–æ–∫—É
# –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ lang —É –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö
# years month days hours minutes -> time = {'years': "...", 'month': "...",  ...}
# –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–∞—Ç–∏ –º—ñ–Ω—è—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–¥–∞–Ω–Ω–∏–∫–∞
# –í–∏–¥–∞–ª–∏—Ç–∏ current_shown_dates
# –¥–æ–¥–∞—Ç–∏ Traceback –¥–ª—è get_day(), next_month(), ...
# –ø–æ–º—ñ–Ω—è—Ç–∏ –º—ñ—Å—Ü—è–º–∏ –æ–ø–∏—Å –¥–æ –∑–∞–º—ñ—Ç–∫–∏ —ñ –¥–∞—Ç—É –≤–≤–µ–¥–µ–Ω–Ω—è
# –≤–≤–æ–¥–∏—Ç–∏ –¥–∞—Ç—É –ø–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –î–æ–¥–∞—Ç–∏ –¥–∞—Ç—É
# –≤–≤–æ–¥–∏—Ç–∏ —á–∞—Å —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞—Ç–∏ —á–∞—Å
# –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –±–∞–≥: –∫–æ–ª–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –≤–≤–æ–¥–∏—à —á–∞—Å –Ω–∞–∂–∞—Ç–∏, –Ω–µ –û–ö –∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —è–∫–∏–π—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø–∞–¥–∞—î
# –ü–æ–¥—É–º–∞—Ç–∏ —è–∫ –∑–º–µ–Ω—à–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—á–∏–π—Å—è –∫–æ–¥ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 9 —Ñ—É–Ω–∫—Ü—ñ—è—Ö
# –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–æ—Ä—Ç–µ–∂—ñ –≥–æ–¥–∏–Ω–∏ —ñ —Ö–≤–∏–ª–∏–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ str
# –û–ø–∏—Å –¥–æ –∑–∞–º—ñ—Ç–æ–∫ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∑–∞–º—ñ—Ç–∫—É
# –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
# –¥–æ–¥–∞—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–Ω—è –≤ —Å—Ä–æ—á–Ω–∏—Ö –∑–∞–º—ñ—Ç–æ–∫